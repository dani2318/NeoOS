import os

CONFIG_MK = "scripts/config.mk"
BUILD_NINJA = "build.ninja"

def parse_config(filename) -> dict:
    config = {}
    with open(filename) as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith("#"):
                continue
            if line.startswith("export "):
                line = line[7:]
            if "=" in line:
                key, val = line.split("=", 1)
                val = val.strip()
                val = val.replace("$(current_dir)", os.getcwd())
                if "$(abspath " in val:
                    inner = val[val.find("$(abspath ")+10:val.find(")", val.find("$(abspath "))]
                    val = os.path.abspath(inner.strip())
                config[key.strip()] = val
    return config

def find_files(ext):
    for root, _, files in os.walk("."):
        for f in files:
            if f.endswith(ext):
                yield os.path.join(root, f)

def obj_path(src, subdir, build_dir) -> str:
    return os.path.join(build_dir, "kernel", subdir, src.lstrip("./") + ".obj")

def  to_string_arr(array:list) -> str:
    output = ""
    for element in array:
        output += str(element)
        output += str(" ")
    return output

def write_stage1_subninja(config):
    os.makedirs("src/boot/stage1", exist_ok=True)
    path = "src/boot/stage1/build.ninja"
    build_dir = config.get("BUILD_DIR", "build")
    asm_cmd = config.get("TARGET_ASM", "nasm")
    asmflags = "-f bin"
    src_dir = "src/boot/stage1"

    if asm_cmd == "":
        asm_cmd = "nasm"
    
    asm_sources = []




    for root, _, files in os.walk(src_dir):
        for file in files:
            if file.endswith(".asm"):
                full_path = os.path.join(os.path.abspath(root), file)
                asm_sources.append(full_path)
    print(f"\n\nAssembler command: {asm_cmd}\n\n")

    command = f"$asm -I {src_dir}/stage1"+ to_string_arr(asm_sources) + f"{asmflags} -o $out && echo \"--> Created stage1.bin\""
    print(command)
    with open(path, "w") as f:
        f.write(f"""# Auto-generated by gen_ninja.py
build_dir = {build_dir}
asm = {asm_cmd}

rule asm_bin
  command = {command}
  description = ASM nbootloader.asm

build $build_dir/stage1.bin: asm_bin src/boot/stage1/nbootloader.asm

default $build_dir/stage1.bin
""")

def write_stage2_subninja(config):
    src_dir = "src/boot/stage2"
    build_dir = config.get("BUILD_DIR", "build")
    cc = config.get("TARGET_CC", "gcc")
    cc = f"{cc}".replace("$(shell pwd)", os.path.abspath(os.popen("pwd").read().strip()))
    # FIX: Keep the assembler command, don't overwrite it
    asm_cmd = config.get("TARGET_ASM", "nasm")
    
    if asm_cmd == "":
        asm_cmd = "nasm"

    print(f"\n\nAssembler command: {asm_cmd}\n\n")

    ld = config.get("TARGET_LD", "ld")
    ld = f"{ld}".replace("$(shell pwd)", os.path.abspath(os.popen("pwd").read().strip()))
    cflags = config.get("TARGET_CFLAGS", "")
    cflags = f"{cflags} -ffreestanding -nostdlib "
    asmflags = config.get("TARGET_ASMFLAGS", "-f elf")
    asmflags = f"{asmflags} -f elf"
    ldflags = config.get("TARGET_LINKFLAGS", "-T linker.ld -nostdlib")
    ldflags = f"{ldflags} -T "+f"{os.path.abspath(src_dir)}/linker.ld"+" -nostdlib"
    libs = config.get("TARGET_LIBS", "-lgcc")
    libs = f"{libs} -lgcc"
    print(cflags,asmflags,libs)

    # Find source files
    c_sources = []
    asm_sources = []

    for root, _, files in os.walk(src_dir):
        for file in files:
            if file.endswith(".c"):
                full_path = os.path.join(os.path.abspath(root), file)
                c_sources.append(full_path)
            elif file.endswith(".asm"):
                full_path = os.path.join(os.path.abspath(root), file)
                asm_sources.append(full_path)

    # Prepare object file paths
    c_objects = []
    asm_objects = []

    for src in c_sources:
        rel_path = os.path.relpath(src, src_dir)
        obj_path = os.path.join(build_dir, "stage2/c", rel_path).replace(".c", ".obj")
        c_objects.append(obj_path)
    for asm in asm_sources:
        rel_path = os.path.relpath(asm, src_dir)
        obj_path = os.path.join(build_dir, "stage2/asm", rel_path).replace(".asm", ".obj")
        asm_objects.append(obj_path)

    all_objects = c_objects + asm_objects
    print(all_objects)

    os.makedirs(src_dir, exist_ok=True)
    ninja_path = os.path.join(src_dir, "build.ninja")

    with open(ninja_path, "w") as f:
        f.write(f"""# Auto-generated by gen_ninja.py

build_dir = {build_dir}
cc = {cc}
asm = {asm_cmd}
ld = {ld}
cflags = {cflags}
asmflags = {asmflags}
ldflags = {ldflags}
libs = {libs}

rule cc
    command = mkdir -p {build_dir} && {cc} {cflags} -c -o $out $in && echo "--> Compiled: $in"
    description = CC $in

rule asm
    command = mkdir -p {build_dir} && {asm_cmd} {asmflags} -o $out $in && echo "--> Compiled: $in"
    description = ASM $in

rule link
    command = {ld} {ldflags} -Wl,-Map={build_dir}/stage2.map -o $out $in {libs} && echo "--> Created stage2.bin"
    description = LINK $out

""")
        print(c_sources)
        # Write object build rules
        for asm_file in asm_sources:
            asm_path = f"{asm_file}"
            obj_path = f"{asm_file}".replace(".asm",".obj").replace(os.path.abspath(src_dir), f"{build_dir}/stage2/asm")
            f.write(f"build {obj_path}: asm {asm_path}\n")

        for src in c_sources:
            src_path = f"{src}"
            obj_path = f"{src}".replace(".c",".obj").replace(os.path.abspath(src_dir), f"{build_dir}/stage2/c")
            f.write(f"build {obj_path}: cc {src_path}\n")
        

        f.write(f"\nbuild {build_dir}/stage2.bin: link {' '.join(all_objects)}\n")
        f.write(f"\ndefault {build_dir}/stage2.bin\n")


def write_kernel_subninja(config):
    src_dir = "src/kernel"
    build_dir = config.get("BUILD_DIR", "build")
    cc = config.get("TARGET_CC", "gcc")
    cc = f"{cc}".replace("$(shell pwd)", os.path.abspath(os.popen("pwd").read().strip()))
    asm = config.get("TARGET_ASM", "nasm")
    ld = config.get("TARGET_LD", "ld")
    ld = f"{ld}".replace("$(shell pwd)", os.path.abspath(os.popen("pwd").read().strip()))
    cflags = config.get("TARGET_CFLAGS", "")
    asmflags = config.get("TARGET_ASMFLAGS", "-f elf")
    ldflags = config.get("TARGET_LINKFLAGS", "-T linker.ld -nostdlib")
    libs = config.get("TARGET_LIBS", "-lgcc")

    # Find source files
    c_sources = [f for f in os.listdir(src_dir) if f.endswith(".c")]
    asm_sources = [f for f in os.listdir(src_dir) if f.endswith(".asm")]

    # Prepare object file paths
    c_objects = [f"{build_dir}/kernel/c/{src}.obj" for src in c_sources]
    asm_objects = [f"{build_dir}/kernel/asm/{src}.obj" for src in asm_sources]
    all_objects = c_objects + asm_objects

    os.makedirs(src_dir, exist_ok=True)
    ninja_path = os.path.join(src_dir, "build.ninja")

    with open(ninja_path, "w") as f:
        f.write(f"""# Auto-generated by gen_ninja.py

build_dir = {build_dir}
cc = {cc}
asm = {asm}
ld = {ld}
cflags = {cflags}
asmflags = {asmflags}
ldflags = {ldflags}
libs = {libs}

rule cc
  command = mkdir -p {build_dir} && {cc} {cflags} -c -o $out $in && echo "--> Compiled: $in"
  description = CC $in

rule asm
  command = mkdir -p {build_dir} && {asm} {asmflags} -o $out $in && echo "--> Compiled: $in"
  description = ASM $in

rule link
  command = {ld} {ldflags} -Wl,-Map={build_dir}/kernel.map -o $out $in {libs} && echo "--> Created kernel.bin"
  description = LINK $out

rule build_all_kernel
  command = mkdir -p {build_dir}/kernel/c {build_dir}/kernel/asm && \
    for f in src/boot/kernel/*.c; do \
      {cc} {cflags} -c -o {build_dir}/kernel/c/$$(basename $$f).obj $$f; done && \
    for f in src/boot/kernel/*.asm; do \
      {asm} {asmflags} -o {build_dir}/kernel/asm/$$(basename $$f).obj $$f; done
  description = Compiling all kernel C and ASM files
""")

        f.write(f"\nbuild {build_dir}/kernel.bin: build_all_kernel\n")
        f.write(f"\ndefault {build_dir}/kernel.bin\n")

def main():
    cfg = parse_config(CONFIG_MK)


    cc     = cfg.get("TARGET_CC", "gcc")
    cc = f"{cc}".replace("$(shell pwd)", os.path.abspath(os.popen("pwd").read().strip()))
    asm    = cfg.get("TARGET_ASM", "nasm")
    ld     = cfg.get("TARGET_LD", "ld")
    ld = f"{ld}".replace("$(shell pwd)", os.path.abspath(os.popen("pwd").read().strip()))
    cflags = cfg.get("TARGET_CFLAGS", "")
    aflags = cfg.get("TARGET_ASMFLAGS", "-f elf")
    lflags = cfg.get("TARGET_LINKFLAGS", "-T linker.ld -nostdlib")
    libs   = cfg.get("TARGET_LIBS", "-lgcc")
    bdir   = cfg.get("BUILD_DIR", "build")
    srcdir = cfg.get("SRC_DIR", "src")

    write_stage1_subninja(cfg)
    write_stage2_subninja(cfg)
    write_kernel_subninja(cfg)

    lines = []

    # Header & rules
    lines.append(f"""# Auto-generated build.ninja

target_cc = {cc}
target_asm = {asm}
target_ld = {ld}
cflags = {cflags}
asmflags = {aflags}
ldflags = {lflags}
libs = {libs}
build_dir = {bdir}
src_dir = {srcdir}

rule cc
  command = mkdir -p ${{bdir}} && ${{target_cc}} ${{cflags}} -c -o $out $in && echo "--> Compiled: $in"
  description = CC $in

rule asm
  command = mkdir -p ${{bdir}} && ${{target_asm}} ${{asmflags}} -o $out $in && echo "--> Compiled: $in"
  description = ASM $in

rule link
  command = ${{target_ld}} ${{ldflags}} -Wl,-Map=${{bdir}}/kernel.map -o $out $in ${{libs}} && echo "--> Created kernel.bin"
  description = LINK $out

rule generate_isr
  command = python3 ../../scripts/generate_isr.py && touch generate_isr.stamp
  description = Generate ISR

rule clean_subdir
  command = ninja -C $dir clean
  description = Clean subdir $dir

rule build_subdir
  command = ninja -C $dir
  description = Build subdir $dir

rule always_mkdir
  command = mkdir -p {bdir}
  description = Make build dir

rule clean_all
  command = rm -rf {bdir}/*
  description = Clean all build files

build generate_isr.stamp: generate_isr

build always: always_mkdir

# Build subprojects recursively
build stage1: build_subdir
  dir = {srcdir}/boot/stage1

build stage2: build_subdir
  dir = {srcdir}/boot/stage2

build kernel_sub: build_subdir
  dir = {srcdir}/kernel

# Top-level bootloader depends on stage1 and stage2
build bootloader: phony stage1 stage2

# Kernel depends on kernel subdir
build kernel: phony kernel_sub

# Disk images depend on bootloader and kernel
build floppy_image: phony bootloader kernel
build hdd_image: phony bootloader kernel

# Clean targets
build clean_stage1: clean_subdir
  dir = {bdir}/boot/stage1

build clean_stage2: clean_subdir
  dir = {bdir}/boot/stage2

build clean_kernel: clean_subdir
  dir = {bdir}/kernel

build clean: phony clean_stage1 clean_stage2 clean_kernel clean_all

# Default build target
default floppy_image

""")
    lines.append("subninja src/boot/stage2/build.ninja\n")
    lines.append("subninja src/boot/stage1/build.ninja\n")
    lines.append("subninja src/kernel/build.ninja\n")
    # Write all at once
    with open(BUILD_NINJA, "w") as f:
        f.write("\n".join(lines))


if __name__ == "__main__":
    main()