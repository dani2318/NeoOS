import os

from SCons.Environment import Environment
from scripts.build_scripts.utility import GlobRecursive, FindIndex, IsFileName


Import('TARGET_ENVIRONMENT')
TARGET_ENVIRONMENT: Environment

env = TARGET_ENVIRONMENT.Clone()
env.Append(
    LINKFLAGS = [
        '-Wl,-T', env.File('linker.ld').srcnode().path,
        '-Wl,-Map=' + env.File('kernel.map').path
    ],
    CPPPATH = [ 
        env.Dir('.').srcnode(),
    ],
    ASFLAGS = [ '-I', env.Dir('.').srcnode(), '-f', 'elf' ]
)

sources = GlobRecursive(env, '*.c') + \
          GlobRecursive(env, '*.cpp') + \
          GlobRecursive(env, '*.asm')
io_c = env.Object(target='arch/i686/io_c.o', source='arch/i686/io.c')
io_asm = env.Object(target='arch/i686/io_asm.o', source='arch/i686/io.asm')

objects = env.Object(sources)
obj_crti = objects.pop(FindIndex(objects, lambda item: IsFileName(item, 'crti.o')))
obj_crtn = objects.pop(FindIndex(objects, lambda item: IsFileName(item, 'crtn.o')))

objects = [
    obj_crti,
    os.path.join(env["TOOLCHAIN_LIBGCC"], 'crtbegin.o'),
    *objects,
    os.path.join(env["TOOLCHAIN_LIBGCC"], 'crtend.o'),
    obj_crtn
]

kernel = env.Program('kernel.elf', objects)

Export('kernel')