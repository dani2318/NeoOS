import os
from pathlib import Path

MAIN_PATH = Path(__file__.replace("generate_isr.py","")).parent.absolute()

PATH = f"{MAIN_PATH}/src/kernel/arch/i686"

ISRS_GEN_C = f"{PATH}/isrs_gen.c"
ISRS_GEN_ASM = f"{PATH}/isrs_gen.inc"
ISRS_WITH_ERROR_CODE=[8,10,11,12,13,14,17,21,30]

def generate_inc():

    inc = Path(ISRS_GEN_ASM)
    if inc.is_file():
       os.remove(inc.absolute())

    with open(ISRS_GEN_ASM, 'w') as f:
        for i in range(0, 256):
            if i in ISRS_WITH_ERROR_CODE:
                f.write(f"ISR_ERRORCODE {i}\r\n")
            else:
                f.write(f"ISR_NOERRORCODE {i}\r\n")
        f.close()
    return

def generate_h():

    c = Path(ISRS_GEN_C)
    if c.is_file():
        os.remove(c.absolute())

    with open(ISRS_GEN_C, 'w') as f:
        f.write( "// !!!! THIS FILE IS AUTOGENERATED !!!!\r\n")
        f.write("#include \"idt.h\"\r\n")
        f.write("#include \"gdt.h\"\r\n")

        for i in range(0, 256):
            f.write(f"void __attribute__((cdecl)) i686_ISR{i}();\r\n")

        f.write("\n\r")
        f.write("void i686_ISR_InitializeGates(){\r\n")
        for i in range(0, 256):
            f.write(f"\ti686_IDT_SetGate({i}, i686_ISR{i}, i686_GDT_CODE_SEGMENT, IDT_FLAG_RING0 | IDI_FLAG_GATE_32BIT_INT);\r\n")
        f.write("}\r\n")
        f.write("// !!!!! THIS FILE IS AUTOGENERATED !!!!!\r\n")
        f.close()
    return

generate_h()
generate_inc()